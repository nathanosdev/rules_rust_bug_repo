###############################################################################
# @generated
# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To
# regenerate this file, run the following:
#
#     bazel run //3rdparty:crates_vendor
###############################################################################
"""
# `crates_repository` API

- [aliases](#aliases)
- [crate_deps](#crate_deps)
- [all_crate_deps](#all_crate_deps)
- [crate_repositories](#crate_repositories)

"""

load("@bazel_skylib//lib:selects.bzl", "selects")
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")

###############################################################################
# MACROS API
###############################################################################

# An identifier that represent common dependencies (unconditional).
_COMMON_CONDITION = ""

def _flatten_dependency_maps(all_dependency_maps):
    """Flatten a list of dependency maps into one dictionary.

    Dependency maps have the following structure:

    ```python
    DEPENDENCIES_MAP = {
        # The first key in the map is a Bazel package
        # name of the workspace this file is defined in.
        "workspace_member_package": {

            # Not all dependnecies are supported for all platforms.
            # the condition key is the condition required to be true
            # on the host platform.
            "condition": {

                # An alias to a crate target.     # The label of the crate target the
                # Aliases are only crate names.   # package name refers to.
                "package_name":                   "@full//:label",
            }
        }
    }
    ```

    Args:
        all_dependency_maps (list): A list of dicts as described above

    Returns:
        dict: A dictionary as described above
    """
    dependencies = {}

    for workspace_deps_map in all_dependency_maps:
        for pkg_name, conditional_deps_map in workspace_deps_map.items():
            if pkg_name not in dependencies:
                non_frozen_map = dict()
                for key, values in conditional_deps_map.items():
                    non_frozen_map.update({key: dict(values.items())})
                dependencies.setdefault(pkg_name, non_frozen_map)
                continue

            for condition, deps_map in conditional_deps_map.items():
                # If the condition has not been recorded, do so and continue
                if condition not in dependencies[pkg_name]:
                    dependencies[pkg_name].setdefault(condition, dict(deps_map.items()))
                    continue

                # Alert on any miss-matched dependencies
                inconsistent_entries = []
                for crate_name, crate_label in deps_map.items():
                    existing = dependencies[pkg_name][condition].get(crate_name)
                    if existing and existing != crate_label:
                        inconsistent_entries.append((crate_name, existing, crate_label))
                    dependencies[pkg_name][condition].update({crate_name: crate_label})

    return dependencies

def crate_deps(deps, package_name = None):
    """Finds the fully qualified label of the requested crates for the package where this macro is called.

    Args:
        deps (list): The desired list of crate targets.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()`.

    Returns:
        list: A list of labels to generated rust targets (str)
    """

    if not deps:
        return []

    if package_name == None:
        package_name = native.package_name()

    # Join both sets of dependencies
    dependencies = _flatten_dependency_maps([
        _NORMAL_DEPENDENCIES,
        _NORMAL_DEV_DEPENDENCIES,
        _PROC_MACRO_DEPENDENCIES,
        _PROC_MACRO_DEV_DEPENDENCIES,
        _BUILD_DEPENDENCIES,
        _BUILD_PROC_MACRO_DEPENDENCIES,
    ]).pop(package_name, {})

    # Combine all conditional packages so we can easily index over a flat list
    # TODO: Perhaps this should actually return select statements and maintain
    # the conditionals of the dependencies
    flat_deps = {}
    for deps_set in dependencies.values():
        for crate_name, crate_label in deps_set.items():
            flat_deps.update({crate_name: crate_label})

    missing_crates = []
    crate_targets = []
    for crate_target in deps:
        if crate_target not in flat_deps:
            missing_crates.append(crate_target)
        else:
            crate_targets.append(flat_deps[crate_target])

    if missing_crates:
        fail("Could not find crates `{}` among dependencies of `{}`. Available dependencies were `{}`".format(
            missing_crates,
            package_name,
            dependencies,
        ))

    return crate_targets

def all_crate_deps(
        normal = False,
        normal_dev = False,
        proc_macro = False,
        proc_macro_dev = False,
        build = False,
        build_proc_macro = False,
        package_name = None):
    """Finds the fully qualified label of all requested direct crate dependencies \
    for the package where this macro is called.

    If no parameters are set, all normal dependencies are returned. Setting any one flag will
    otherwise impact the contents of the returned list.

    Args:
        normal (bool, optional): If True, normal dependencies are included in the
            output list.
        normal_dev (bool, optional): If True, normla dev dependencies will be
            included in the output list..
        proc_macro (bool, optional): If True, proc_macro dependencies are included
            in the output list.
        proc_macro_dev (bool, optional): If True, dev proc_macro dependencies are
            included in the output list.
        build (bool, optional): If True, build dependencies are included
            in the output list.
        build_proc_macro (bool, optional): If True, build proc_macro dependencies are
            included in the output list.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()` when unset.

    Returns:
        list: A list of labels to generated rust targets (str)
    """

    if package_name == None:
        package_name = native.package_name()

    # Determine the relevant maps to use
    all_dependency_maps = []
    if normal:
        all_dependency_maps.append(_NORMAL_DEPENDENCIES)
    if normal_dev:
        all_dependency_maps.append(_NORMAL_DEV_DEPENDENCIES)
    if proc_macro:
        all_dependency_maps.append(_PROC_MACRO_DEPENDENCIES)
    if proc_macro_dev:
        all_dependency_maps.append(_PROC_MACRO_DEV_DEPENDENCIES)
    if build:
        all_dependency_maps.append(_BUILD_DEPENDENCIES)
    if build_proc_macro:
        all_dependency_maps.append(_BUILD_PROC_MACRO_DEPENDENCIES)

    # Default to always using normal dependencies
    if not all_dependency_maps:
        all_dependency_maps.append(_NORMAL_DEPENDENCIES)

    dependencies = _flatten_dependency_maps(all_dependency_maps).pop(package_name, None)

    if not dependencies:
        if dependencies == None:
            fail("Tried to get all_crate_deps for package " + package_name + " but that package had no Cargo.toml file")
        else:
            return []

    crate_deps = list(dependencies.pop(_COMMON_CONDITION, {}).values())
    for condition, deps in dependencies.items():
        crate_deps += selects.with_or({_CONDITIONS[condition]: deps.values()})

    return crate_deps

def aliases(
        normal = False,
        normal_dev = False,
        proc_macro = False,
        proc_macro_dev = False,
        build = False,
        build_proc_macro = False,
        package_name = None):
    """Produces a map of Crate alias names to their original label

    If no dependency kinds are specified, `normal` and `proc_macro` are used by default.
    Setting any one flag will otherwise determine the contents of the returned dict.

    Args:
        normal (bool, optional): If True, normal dependencies are included in the
            output list.
        normal_dev (bool, optional): If True, normla dev dependencies will be
            included in the output list..
        proc_macro (bool, optional): If True, proc_macro dependencies are included
            in the output list.
        proc_macro_dev (bool, optional): If True, dev proc_macro dependencies are
            included in the output list.
        build (bool, optional): If True, build dependencies are included
            in the output list.
        build_proc_macro (bool, optional): If True, build proc_macro dependencies are
            included in the output list.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()` when unset.

    Returns:
        dict: The aliases of all associated packages
    """
    if package_name == None:
        package_name = native.package_name()

    # Determine the relevant maps to use
    all_aliases_maps = []
    if normal:
        all_aliases_maps.append(_NORMAL_ALIASES)
    if normal_dev:
        all_aliases_maps.append(_NORMAL_DEV_ALIASES)
    if proc_macro:
        all_aliases_maps.append(_PROC_MACRO_ALIASES)
    if proc_macro_dev:
        all_aliases_maps.append(_PROC_MACRO_DEV_ALIASES)
    if build:
        all_aliases_maps.append(_BUILD_ALIASES)
    if build_proc_macro:
        all_aliases_maps.append(_BUILD_PROC_MACRO_ALIASES)

    # Default to always using normal aliases
    if not all_aliases_maps:
        all_aliases_maps.append(_NORMAL_ALIASES)
        all_aliases_maps.append(_PROC_MACRO_ALIASES)

    aliases = _flatten_dependency_maps(all_aliases_maps).pop(package_name, None)

    if not aliases:
        return dict()

    common_items = aliases.pop(_COMMON_CONDITION, {}).items()

    # If there are only common items in the dictionary, immediately return them
    if not len(aliases.keys()) == 1:
        return dict(common_items)

    # Build a single select statement where each conditional has accounted for the
    # common set of aliases.
    crate_aliases = {"//conditions:default": common_items}
    for condition, deps in aliases.items():
        condition_triples = _CONDITIONS[condition]
        if condition_triples in crate_aliases:
            crate_aliases[condition_triples].update(deps)
        else:
            crate_aliases.update({_CONDITIONS[condition]: dict(deps.items() + common_items)})

    return selects.with_or(crate_aliases)

###############################################################################
# WORKSPACE MEMBER DEPS AND ALIASES
###############################################################################

_NORMAL_DEPENDENCIES = {
    "": {
        _COMMON_CONDITION: {
            "wgpu": "@crates_vendor__wgpu-0.14.0//:wgpu",
        },
    },
}

_NORMAL_ALIASES = {
    "": {
        _COMMON_CONDITION: {
        },
    },
}

_NORMAL_DEV_DEPENDENCIES = {
    "": {
    },
}

_NORMAL_DEV_ALIASES = {
    "": {
    },
}

_PROC_MACRO_DEPENDENCIES = {
    "": {
    },
}

_PROC_MACRO_ALIASES = {
    "": {
    },
}

_PROC_MACRO_DEV_DEPENDENCIES = {
    "": {
    },
}

_PROC_MACRO_DEV_ALIASES = {
    "": {
    },
}

_BUILD_DEPENDENCIES = {
    "": {
    },
}

_BUILD_ALIASES = {
    "": {
    },
}

_BUILD_PROC_MACRO_DEPENDENCIES = {
    "": {
    },
}

_BUILD_PROC_MACRO_ALIASES = {
    "": {
    },
}

_CONDITIONS = {
    "aarch64-pc-windows-gnullvm": [],
    "aarch64-pc-windows-msvc": [],
    "aarch64-uwp-windows-msvc": [],
    "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))": ["aarch64-apple-darwin", "aarch64-apple-ios", "aarch64-apple-ios-sim", "i686-apple-darwin", "x86_64-apple-darwin", "x86_64-apple-ios"],
    "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))": ["aarch64-linux-android", "aarch64-unknown-linux-gnu", "arm-unknown-linux-gnueabi", "armv7-linux-androideabi", "armv7-unknown-linux-gnueabi", "i686-linux-android", "i686-unknown-freebsd", "i686-unknown-linux-gnu", "powerpc-unknown-linux-gnu", "s390x-unknown-linux-gnu", "x86_64-linux-android", "x86_64-unknown-freebsd", "x86_64-unknown-linux-gnu"],
    "cfg(all(not(target_arch = \"wasm32\"), windows))": ["i686-pc-windows-msvc", "x86_64-pc-windows-msvc"],
    "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))": ["wasm32-unknown-unknown", "wasm32-wasi"],
    "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))": ["aarch64-apple-darwin", "aarch64-apple-ios", "aarch64-apple-ios-sim", "aarch64-linux-android", "aarch64-unknown-linux-gnu", "arm-unknown-linux-gnueabi", "armv7-linux-androideabi", "armv7-unknown-linux-gnueabi", "i686-apple-darwin", "i686-linux-android", "i686-pc-windows-msvc", "i686-unknown-freebsd", "i686-unknown-linux-gnu", "powerpc-unknown-linux-gnu", "riscv32imc-unknown-none-elf", "s390x-unknown-linux-gnu", "x86_64-apple-darwin", "x86_64-apple-ios", "x86_64-linux-android", "x86_64-pc-windows-msvc", "x86_64-unknown-freebsd", "x86_64-unknown-linux-gnu"],
    "cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"windows\", target_os = \"macos\", target_os = \"ios\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"dragonfly\", target_os = \"solaris\", target_os = \"illumos\", target_os = \"fuchsia\", target_os = \"redox\", target_os = \"cloudabi\", target_os = \"haiku\", target_os = \"vxworks\", target_os = \"emscripten\", target_os = \"wasi\"))": ["aarch64-apple-darwin", "aarch64-apple-ios", "aarch64-apple-ios-sim", "aarch64-linux-android", "aarch64-unknown-linux-gnu", "arm-unknown-linux-gnueabi", "armv7-linux-androideabi", "armv7-unknown-linux-gnueabi", "i686-apple-darwin", "i686-linux-android", "i686-pc-windows-msvc", "i686-unknown-freebsd", "i686-unknown-linux-gnu", "powerpc-unknown-linux-gnu", "s390x-unknown-linux-gnu", "wasm32-wasi", "x86_64-apple-darwin", "x86_64-apple-ios", "x86_64-linux-android", "x86_64-pc-windows-msvc", "x86_64-unknown-freebsd", "x86_64-unknown-linux-gnu"],
    "cfg(any(target_os = \"macos\", target_os = \"ios\"))": ["aarch64-apple-darwin", "aarch64-apple-ios", "aarch64-apple-ios-sim", "i686-apple-darwin", "x86_64-apple-darwin", "x86_64-apple-ios"],
    "cfg(not(all(target_arch = \"arm\", target_os = \"none\")))": ["aarch64-apple-darwin", "aarch64-apple-ios", "aarch64-apple-ios-sim", "aarch64-linux-android", "aarch64-unknown-linux-gnu", "arm-unknown-linux-gnueabi", "armv7-linux-androideabi", "armv7-unknown-linux-gnueabi", "i686-apple-darwin", "i686-linux-android", "i686-pc-windows-msvc", "i686-unknown-freebsd", "i686-unknown-linux-gnu", "powerpc-unknown-linux-gnu", "riscv32imc-unknown-none-elf", "s390x-unknown-linux-gnu", "wasm32-unknown-unknown", "wasm32-wasi", "x86_64-apple-darwin", "x86_64-apple-ios", "x86_64-linux-android", "x86_64-pc-windows-msvc", "x86_64-unknown-freebsd", "x86_64-unknown-linux-gnu"],
    "cfg(not(target_arch = \"wasm32\"))": ["aarch64-apple-darwin", "aarch64-apple-ios", "aarch64-apple-ios-sim", "aarch64-linux-android", "aarch64-unknown-linux-gnu", "arm-unknown-linux-gnueabi", "armv7-linux-androideabi", "armv7-unknown-linux-gnueabi", "i686-apple-darwin", "i686-linux-android", "i686-pc-windows-msvc", "i686-unknown-freebsd", "i686-unknown-linux-gnu", "powerpc-unknown-linux-gnu", "riscv32imc-unknown-none-elf", "s390x-unknown-linux-gnu", "x86_64-apple-darwin", "x86_64-apple-ios", "x86_64-linux-android", "x86_64-pc-windows-msvc", "x86_64-unknown-freebsd", "x86_64-unknown-linux-gnu"],
    "cfg(target_arch = \"wasm32\")": ["wasm32-unknown-unknown", "wasm32-wasi"],
    "cfg(target_feature = \"atomics\")": [],
    "cfg(target_os = \"android\")": ["aarch64-linux-android", "armv7-linux-androideabi", "i686-linux-android", "x86_64-linux-android"],
    "cfg(target_os = \"emscripten\")": [],
    "cfg(target_os = \"redox\")": [],
    "cfg(target_os = \"wasi\")": ["wasm32-wasi"],
    "cfg(unix)": ["aarch64-apple-darwin", "aarch64-apple-ios", "aarch64-apple-ios-sim", "aarch64-linux-android", "aarch64-unknown-linux-gnu", "arm-unknown-linux-gnueabi", "armv7-linux-androideabi", "armv7-unknown-linux-gnueabi", "i686-apple-darwin", "i686-linux-android", "i686-unknown-freebsd", "i686-unknown-linux-gnu", "powerpc-unknown-linux-gnu", "s390x-unknown-linux-gnu", "x86_64-apple-darwin", "x86_64-apple-ios", "x86_64-linux-android", "x86_64-unknown-freebsd", "x86_64-unknown-linux-gnu"],
    "cfg(windows)": ["i686-pc-windows-msvc", "x86_64-pc-windows-msvc"],
    "i686-pc-windows-gnu": [],
    "i686-pc-windows-msvc": ["i686-pc-windows-msvc"],
    "i686-uwp-windows-gnu": [],
    "i686-uwp-windows-msvc": [],
    "x86_64-pc-windows-gnu": [],
    "x86_64-pc-windows-gnullvm": [],
    "x86_64-pc-windows-msvc": ["x86_64-pc-windows-msvc"],
    "x86_64-uwp-windows-gnu": [],
    "x86_64-uwp-windows-msvc": [],
}

###############################################################################

def crate_repositories():
    """A macro for defining repositories for all generated crates"""
    maybe(
        http_archive,
        name = "crates_vendor__ahash-0.7.6",
        sha256 = "fcb51a0695d8f838b1ee009b3fbf66bda078cd64590202a864a8f3e8c4315c47",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/ahash/0.7.6/download"],
        strip_prefix = "ahash-0.7.6",
        build_file = Label("@//3rdparty/crates:BUILD.ahash-0.7.6.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__android_system_properties-0.1.5",
        sha256 = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/android_system_properties/0.1.5/download"],
        strip_prefix = "android_system_properties-0.1.5",
        build_file = Label("@//3rdparty/crates:BUILD.android_system_properties-0.1.5.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__arrayvec-0.7.2",
        sha256 = "8da52d66c7071e2e3fa2a1e5c6d088fec47b593032b254f5e980de8ea54454d6",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/arrayvec/0.7.2/download"],
        strip_prefix = "arrayvec-0.7.2",
        build_file = Label("@//3rdparty/crates:BUILD.arrayvec-0.7.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__ash-0.37.0-1.3.209",
        sha256 = "006ca68e0f2b03f22d6fa9f2860f85aed430d257fec20f8879b2145e7c7ae1a6",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/ash/0.37.0+1.3.209/download"],
        strip_prefix = "ash-0.37.0+1.3.209",
        build_file = Label("@//3rdparty/crates:BUILD.ash-0.37.0+1.3.209.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__autocfg-1.1.0",
        sha256 = "d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/autocfg/1.1.0/download"],
        strip_prefix = "autocfg-1.1.0",
        build_file = Label("@//3rdparty/crates:BUILD.autocfg-1.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__bit-set-0.5.3",
        sha256 = "0700ddab506f33b20a03b13996eccd309a48e5ff77d0d95926aa0210fb4e95f1",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/bit-set/0.5.3/download"],
        strip_prefix = "bit-set-0.5.3",
        build_file = Label("@//3rdparty/crates:BUILD.bit-set-0.5.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__bit-vec-0.6.3",
        sha256 = "349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/bit-vec/0.6.3/download"],
        strip_prefix = "bit-vec-0.6.3",
        build_file = Label("@//3rdparty/crates:BUILD.bit-vec-0.6.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__bitflags-1.3.2",
        sha256 = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/bitflags/1.3.2/download"],
        strip_prefix = "bitflags-1.3.2",
        build_file = Label("@//3rdparty/crates:BUILD.bitflags-1.3.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__block-0.1.6",
        sha256 = "0d8c1fef690941d3e7788d328517591fecc684c084084702d6ff1641e993699a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/block/0.1.6/download"],
        strip_prefix = "block-0.1.6",
        build_file = Label("@//3rdparty/crates:BUILD.block-0.1.6.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__bumpalo-3.11.1",
        sha256 = "572f695136211188308f16ad2ca5c851a712c464060ae6974944458eb83880ba",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/bumpalo/3.11.1/download"],
        strip_prefix = "bumpalo-3.11.1",
        build_file = Label("@//3rdparty/crates:BUILD.bumpalo-3.11.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__byteorder-1.4.3",
        sha256 = "14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/byteorder/1.4.3/download"],
        strip_prefix = "byteorder-1.4.3",
        build_file = Label("@//3rdparty/crates:BUILD.byteorder-1.4.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__cc-1.0.74",
        sha256 = "581f5dba903aac52ea3feb5ec4810848460ee833876f1f9b0fdeab1f19091574",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cc/1.0.74/download"],
        strip_prefix = "cc-1.0.74",
        build_file = Label("@//3rdparty/crates:BUILD.cc-1.0.74.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__cfg-if-1.0.0",
        sha256 = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cfg-if/1.0.0/download"],
        strip_prefix = "cfg-if-1.0.0",
        build_file = Label("@//3rdparty/crates:BUILD.cfg-if-1.0.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__cfg_aliases-0.1.1",
        sha256 = "fd16c4719339c4530435d38e511904438d07cce7950afa3718a84ac36c10e89e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cfg_aliases/0.1.1/download"],
        strip_prefix = "cfg_aliases-0.1.1",
        build_file = Label("@//3rdparty/crates:BUILD.cfg_aliases-0.1.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__codespan-reporting-0.11.1",
        sha256 = "3538270d33cc669650c4b093848450d380def10c331d38c768e34cac80576e6e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/codespan-reporting/0.11.1/download"],
        strip_prefix = "codespan-reporting-0.11.1",
        build_file = Label("@//3rdparty/crates:BUILD.codespan-reporting-0.11.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__core-foundation-0.9.3",
        sha256 = "194a7a9e6de53fa55116934067c844d9d749312f75c6f6d0980e8c252f8c2146",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/core-foundation/0.9.3/download"],
        strip_prefix = "core-foundation-0.9.3",
        build_file = Label("@//3rdparty/crates:BUILD.core-foundation-0.9.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__core-foundation-sys-0.8.3",
        sha256 = "5827cebf4670468b8772dd191856768aedcb1b0278a04f989f7766351917b9dc",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/core-foundation-sys/0.8.3/download"],
        strip_prefix = "core-foundation-sys-0.8.3",
        build_file = Label("@//3rdparty/crates:BUILD.core-foundation-sys-0.8.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__core-graphics-types-0.1.1",
        sha256 = "3a68b68b3446082644c91ac778bf50cd4104bfb002b5a6a7c44cca5a2c70788b",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/core-graphics-types/0.1.1/download"],
        strip_prefix = "core-graphics-types-0.1.1",
        build_file = Label("@//3rdparty/crates:BUILD.core-graphics-types-0.1.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__cty-0.2.2",
        sha256 = "b365fabc795046672053e29c954733ec3b05e4be654ab130fe8f1f94d7051f35",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cty/0.2.2/download"],
        strip_prefix = "cty-0.2.2",
        build_file = Label("@//3rdparty/crates:BUILD.cty-0.2.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__d3d12-0.5.0",
        sha256 = "827914e1f53b1e0e025ecd3d967a7836b7bcb54520f90e21ef8df7b4d88a2759",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/d3d12/0.5.0/download"],
        strip_prefix = "d3d12-0.5.0",
        build_file = Label("@//3rdparty/crates:BUILD.d3d12-0.5.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__foreign-types-0.3.2",
        sha256 = "f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/foreign-types/0.3.2/download"],
        strip_prefix = "foreign-types-0.3.2",
        build_file = Label("@//3rdparty/crates:BUILD.foreign-types-0.3.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__foreign-types-shared-0.1.1",
        sha256 = "00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/foreign-types-shared/0.1.1/download"],
        strip_prefix = "foreign-types-shared-0.1.1",
        build_file = Label("@//3rdparty/crates:BUILD.foreign-types-shared-0.1.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__fxhash-0.2.1",
        sha256 = "c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/fxhash/0.2.1/download"],
        strip_prefix = "fxhash-0.2.1",
        build_file = Label("@//3rdparty/crates:BUILD.fxhash-0.2.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__getrandom-0.2.8",
        sha256 = "c05aeb6a22b8f62540c194aac980f2115af067bfe15a0734d7277a768d396b31",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/getrandom/0.2.8/download"],
        strip_prefix = "getrandom-0.2.8",
        build_file = Label("@//3rdparty/crates:BUILD.getrandom-0.2.8.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__glow-0.11.2",
        sha256 = "d8bd5877156a19b8ac83a29b2306fe20537429d318f3ff0a1a2119f8d9c61919",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/glow/0.11.2/download"],
        strip_prefix = "glow-0.11.2",
        build_file = Label("@//3rdparty/crates:BUILD.glow-0.11.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__gpu-alloc-0.5.3",
        sha256 = "7fc59e5f710e310e76e6707f86c561dd646f69a8876da9131703b2f717de818d",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/gpu-alloc/0.5.3/download"],
        strip_prefix = "gpu-alloc-0.5.3",
        build_file = Label("@//3rdparty/crates:BUILD.gpu-alloc-0.5.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__gpu-alloc-types-0.2.0",
        sha256 = "54804d0d6bc9d7f26db4eaec1ad10def69b599315f487d32c334a80d1efe67a5",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/gpu-alloc-types/0.2.0/download"],
        strip_prefix = "gpu-alloc-types-0.2.0",
        build_file = Label("@//3rdparty/crates:BUILD.gpu-alloc-types-0.2.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__gpu-descriptor-0.2.3",
        sha256 = "0b0c02e1ba0bdb14e965058ca34e09c020f8e507a760df1121728e0aef68d57a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/gpu-descriptor/0.2.3/download"],
        strip_prefix = "gpu-descriptor-0.2.3",
        build_file = Label("@//3rdparty/crates:BUILD.gpu-descriptor-0.2.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__gpu-descriptor-types-0.1.1",
        sha256 = "363e3677e55ad168fef68cf9de3a4a310b53124c5e784c53a1d70e92d23f2126",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/gpu-descriptor-types/0.1.1/download"],
        strip_prefix = "gpu-descriptor-types-0.1.1",
        build_file = Label("@//3rdparty/crates:BUILD.gpu-descriptor-types-0.1.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__hashbrown-0.12.3",
        sha256 = "8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/hashbrown/0.12.3/download"],
        strip_prefix = "hashbrown-0.12.3",
        build_file = Label("@//3rdparty/crates:BUILD.hashbrown-0.12.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__hexf-parse-0.2.1",
        sha256 = "dfa686283ad6dd069f105e5ab091b04c62850d3e4cf5d67debad1933f55023df",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/hexf-parse/0.2.1/download"],
        strip_prefix = "hexf-parse-0.2.1",
        build_file = Label("@//3rdparty/crates:BUILD.hexf-parse-0.2.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__indexmap-1.9.1",
        sha256 = "10a35a97730320ffe8e2d410b5d3b69279b98d2c14bdb8b70ea89ecf7888d41e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/indexmap/1.9.1/download"],
        strip_prefix = "indexmap-1.9.1",
        build_file = Label("@//3rdparty/crates:BUILD.indexmap-1.9.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__js-sys-0.3.60",
        sha256 = "49409df3e3bf0856b916e2ceaca09ee28e6871cf7d9ce97a692cacfdb2a25a47",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/js-sys/0.3.60/download"],
        strip_prefix = "js-sys-0.3.60",
        build_file = Label("@//3rdparty/crates:BUILD.js-sys-0.3.60.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__khronos-egl-4.1.0",
        sha256 = "8c2352bd1d0bceb871cb9d40f24360c8133c11d7486b68b5381c1dd1a32015e3",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/khronos-egl/4.1.0/download"],
        strip_prefix = "khronos-egl-4.1.0",
        build_file = Label("@//3rdparty/crates:BUILD.khronos-egl-4.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__libc-0.2.137",
        sha256 = "fc7fcc620a3bff7cdd7a365be3376c97191aeaccc2a603e600951e452615bf89",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/libc/0.2.137/download"],
        strip_prefix = "libc-0.2.137",
        build_file = Label("@//3rdparty/crates:BUILD.libc-0.2.137.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__libloading-0.7.3",
        sha256 = "efbc0f03f9a775e9f6aed295c6a1ba2253c5757a9e03d55c6caa46a681abcddd",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/libloading/0.7.3/download"],
        strip_prefix = "libloading-0.7.3",
        build_file = Label("@//3rdparty/crates:BUILD.libloading-0.7.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__lock_api-0.4.9",
        sha256 = "435011366fe56583b16cf956f9df0095b405b82d76425bc8981c0e22e60ec4df",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/lock_api/0.4.9/download"],
        strip_prefix = "lock_api-0.4.9",
        build_file = Label("@//3rdparty/crates:BUILD.lock_api-0.4.9.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__log-0.4.17",
        sha256 = "abb12e687cfb44aa40f41fc3978ef76448f9b6038cad6aef4259d3c095a2382e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/log/0.4.17/download"],
        strip_prefix = "log-0.4.17",
        build_file = Label("@//3rdparty/crates:BUILD.log-0.4.17.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__malloc_buf-0.0.6",
        sha256 = "62bb907fe88d54d8d9ce32a3cceab4218ed2f6b7d35617cafe9adf84e43919cb",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/malloc_buf/0.0.6/download"],
        strip_prefix = "malloc_buf-0.0.6",
        build_file = Label("@//3rdparty/crates:BUILD.malloc_buf-0.0.6.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__metal-0.24.0",
        sha256 = "de11355d1f6781482d027a3b4d4de7825dcedb197bf573e0596d00008402d060",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/metal/0.24.0/download"],
        strip_prefix = "metal-0.24.0",
        build_file = Label("@//3rdparty/crates:BUILD.metal-0.24.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__naga-0.10.0",
        sha256 = "262d2840e72dbe250e8cf2f522d080988dfca624c4112c096238a4845f591707",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/naga/0.10.0/download"],
        strip_prefix = "naga-0.10.0",
        build_file = Label("@//3rdparty/crates:BUILD.naga-0.10.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__num-traits-0.2.15",
        sha256 = "578ede34cf02f8924ab9447f50c28075b4d3e5b269972345e7e0372b38c6cdcd",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/num-traits/0.2.15/download"],
        strip_prefix = "num-traits-0.2.15",
        build_file = Label("@//3rdparty/crates:BUILD.num-traits-0.2.15.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__objc-0.2.7",
        sha256 = "915b1b472bc21c53464d6c8461c9d3af805ba1ef837e1cac254428f4a77177b1",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/objc/0.2.7/download"],
        strip_prefix = "objc-0.2.7",
        build_file = Label("@//3rdparty/crates:BUILD.objc-0.2.7.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__objc_exception-0.1.2",
        sha256 = "ad970fb455818ad6cba4c122ad012fae53ae8b4795f86378bce65e4f6bab2ca4",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/objc_exception/0.1.2/download"],
        strip_prefix = "objc_exception-0.1.2",
        build_file = Label("@//3rdparty/crates:BUILD.objc_exception-0.1.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__once_cell-1.16.0",
        sha256 = "86f0b0d4bf799edbc74508c1e8bf170ff5f41238e5f8225603ca7caaae2b7860",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/once_cell/1.16.0/download"],
        strip_prefix = "once_cell-1.16.0",
        build_file = Label("@//3rdparty/crates:BUILD.once_cell-1.16.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__parking_lot-0.12.1",
        sha256 = "3742b2c103b9f06bc9fff0a37ff4912935851bee6d36f3c02bcc755bcfec228f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/parking_lot/0.12.1/download"],
        strip_prefix = "parking_lot-0.12.1",
        build_file = Label("@//3rdparty/crates:BUILD.parking_lot-0.12.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__parking_lot_core-0.9.4",
        sha256 = "4dc9e0dc2adc1c69d09143aff38d3d30c5c3f0df0dad82e6d25547af174ebec0",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/parking_lot_core/0.9.4/download"],
        strip_prefix = "parking_lot_core-0.9.4",
        build_file = Label("@//3rdparty/crates:BUILD.parking_lot_core-0.9.4.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__pkg-config-0.3.26",
        sha256 = "6ac9a59f73473f1b8d852421e59e64809f025994837ef743615c6d0c5b305160",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/pkg-config/0.3.26/download"],
        strip_prefix = "pkg-config-0.3.26",
        build_file = Label("@//3rdparty/crates:BUILD.pkg-config-0.3.26.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__proc-macro2-1.0.47",
        sha256 = "5ea3d908b0e36316caf9e9e2c4625cdde190a7e6f440d794667ed17a1855e725",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/proc-macro2/1.0.47/download"],
        strip_prefix = "proc-macro2-1.0.47",
        build_file = Label("@//3rdparty/crates:BUILD.proc-macro2-1.0.47.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__profiling-1.0.7",
        sha256 = "74605f360ce573babfe43964cbe520294dcb081afbf8c108fc6e23036b4da2df",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/profiling/1.0.7/download"],
        strip_prefix = "profiling-1.0.7",
        build_file = Label("@//3rdparty/crates:BUILD.profiling-1.0.7.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__quote-1.0.21",
        sha256 = "bbe448f377a7d6961e30f5955f9b8d106c3f5e449d493ee1b125c1d43c2b5179",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/quote/1.0.21/download"],
        strip_prefix = "quote-1.0.21",
        build_file = Label("@//3rdparty/crates:BUILD.quote-1.0.21.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__range-alloc-0.1.2",
        sha256 = "63e935c45e09cc6dcf00d2f0b2d630a58f4095320223d47fc68918722f0538b6",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/range-alloc/0.1.2/download"],
        strip_prefix = "range-alloc-0.1.2",
        build_file = Label("@//3rdparty/crates:BUILD.range-alloc-0.1.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__raw-window-handle-0.5.0",
        sha256 = "ed7e3d950b66e19e0c372f3fa3fbbcf85b1746b571f74e0c2af6042a5c93420a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/raw-window-handle/0.5.0/download"],
        strip_prefix = "raw-window-handle-0.5.0",
        build_file = Label("@//3rdparty/crates:BUILD.raw-window-handle-0.5.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__redox_syscall-0.2.16",
        sha256 = "fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/redox_syscall/0.2.16/download"],
        strip_prefix = "redox_syscall-0.2.16",
        build_file = Label("@//3rdparty/crates:BUILD.redox_syscall-0.2.16.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__renderdoc-sys-0.7.1",
        sha256 = "f1382d1f0a252c4bf97dc20d979a2fdd05b024acd7c2ed0f7595d7817666a157",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/renderdoc-sys/0.7.1/download"],
        strip_prefix = "renderdoc-sys-0.7.1",
        build_file = Label("@//3rdparty/crates:BUILD.renderdoc-sys-0.7.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__rustc-hash-1.1.0",
        sha256 = "08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/rustc-hash/1.1.0/download"],
        strip_prefix = "rustc-hash-1.1.0",
        build_file = Label("@//3rdparty/crates:BUILD.rustc-hash-1.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__scopeguard-1.1.0",
        sha256 = "d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/scopeguard/1.1.0/download"],
        strip_prefix = "scopeguard-1.1.0",
        build_file = Label("@//3rdparty/crates:BUILD.scopeguard-1.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__slotmap-1.0.6",
        sha256 = "e1e08e261d0e8f5c43123b7adf3e4ca1690d655377ac93a03b2c9d3e98de1342",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/slotmap/1.0.6/download"],
        strip_prefix = "slotmap-1.0.6",
        build_file = Label("@//3rdparty/crates:BUILD.slotmap-1.0.6.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__smallvec-1.10.0",
        sha256 = "a507befe795404456341dfab10cef66ead4c041f62b8b11bbb92bffe5d0953e0",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/smallvec/1.10.0/download"],
        strip_prefix = "smallvec-1.10.0",
        build_file = Label("@//3rdparty/crates:BUILD.smallvec-1.10.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__spirv-0.2.0-1.5.4",
        sha256 = "246bfa38fe3db3f1dfc8ca5a2cdeb7348c78be2112740cc0ec8ef18b6d94f830",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/spirv/0.2.0+1.5.4/download"],
        strip_prefix = "spirv-0.2.0+1.5.4",
        build_file = Label("@//3rdparty/crates:BUILD.spirv-0.2.0+1.5.4.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__static_assertions-1.1.0",
        sha256 = "a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/static_assertions/1.1.0/download"],
        strip_prefix = "static_assertions-1.1.0",
        build_file = Label("@//3rdparty/crates:BUILD.static_assertions-1.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__syn-1.0.103",
        sha256 = "a864042229133ada95abf3b54fdc62ef5ccabe9515b64717bcb9a1919e59445d",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/syn/1.0.103/download"],
        strip_prefix = "syn-1.0.103",
        build_file = Label("@//3rdparty/crates:BUILD.syn-1.0.103.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__termcolor-1.1.3",
        sha256 = "bab24d30b911b2376f3a13cc2cd443142f0c81dda04c118693e35b3835757755",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/termcolor/1.1.3/download"],
        strip_prefix = "termcolor-1.1.3",
        build_file = Label("@//3rdparty/crates:BUILD.termcolor-1.1.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__thiserror-1.0.37",
        sha256 = "10deb33631e3c9018b9baf9dcbbc4f737320d2b576bac10f6aefa048fa407e3e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/thiserror/1.0.37/download"],
        strip_prefix = "thiserror-1.0.37",
        build_file = Label("@//3rdparty/crates:BUILD.thiserror-1.0.37.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__thiserror-impl-1.0.37",
        sha256 = "982d17546b47146b28f7c22e3d08465f6b8903d0ea13c1660d9d84a6e7adcdbb",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/thiserror-impl/1.0.37/download"],
        strip_prefix = "thiserror-impl-1.0.37",
        build_file = Label("@//3rdparty/crates:BUILD.thiserror-impl-1.0.37.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__unicode-ident-1.0.5",
        sha256 = "6ceab39d59e4c9499d4e5a8ee0e2735b891bb7308ac83dfb4e80cad195c9f6f3",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/unicode-ident/1.0.5/download"],
        strip_prefix = "unicode-ident-1.0.5",
        build_file = Label("@//3rdparty/crates:BUILD.unicode-ident-1.0.5.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__unicode-width-0.1.10",
        sha256 = "c0edd1e5b14653f783770bce4a4dabb4a5108a5370a5f5d8cfe8710c361f6c8b",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/unicode-width/0.1.10/download"],
        strip_prefix = "unicode-width-0.1.10",
        build_file = Label("@//3rdparty/crates:BUILD.unicode-width-0.1.10.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__unicode-xid-0.2.4",
        sha256 = "f962df74c8c05a667b5ee8bcf162993134c104e96440b663c8daa176dc772d8c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/unicode-xid/0.2.4/download"],
        strip_prefix = "unicode-xid-0.2.4",
        build_file = Label("@//3rdparty/crates:BUILD.unicode-xid-0.2.4.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__version_check-0.9.4",
        sha256 = "49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/version_check/0.9.4/download"],
        strip_prefix = "version_check-0.9.4",
        build_file = Label("@//3rdparty/crates:BUILD.version_check-0.9.4.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__wasi-0.11.0-wasi-snapshot-preview1",
        sha256 = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/wasi/0.11.0+wasi-snapshot-preview1/download"],
        strip_prefix = "wasi-0.11.0+wasi-snapshot-preview1",
        build_file = Label("@//3rdparty/crates:BUILD.wasi-0.11.0+wasi-snapshot-preview1.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__wasm-bindgen-0.2.83",
        sha256 = "eaf9f5aceeec8be17c128b2e93e031fb8a4d469bb9c4ae2d7dc1888b26887268",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/wasm-bindgen/0.2.83/download"],
        strip_prefix = "wasm-bindgen-0.2.83",
        build_file = Label("@//3rdparty/crates:BUILD.wasm-bindgen-0.2.83.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__wasm-bindgen-backend-0.2.83",
        sha256 = "4c8ffb332579b0557b52d268b91feab8df3615f265d5270fec2a8c95b17c1142",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/wasm-bindgen-backend/0.2.83/download"],
        strip_prefix = "wasm-bindgen-backend-0.2.83",
        build_file = Label("@//3rdparty/crates:BUILD.wasm-bindgen-backend-0.2.83.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__wasm-bindgen-futures-0.4.33",
        sha256 = "23639446165ca5a5de86ae1d8896b737ae80319560fbaa4c2887b7da6e7ebd7d",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/wasm-bindgen-futures/0.4.33/download"],
        strip_prefix = "wasm-bindgen-futures-0.4.33",
        build_file = Label("@//3rdparty/crates:BUILD.wasm-bindgen-futures-0.4.33.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__wasm-bindgen-macro-0.2.83",
        sha256 = "052be0f94026e6cbc75cdefc9bae13fd6052cdcaf532fa6c45e7ae33a1e6c810",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/wasm-bindgen-macro/0.2.83/download"],
        strip_prefix = "wasm-bindgen-macro-0.2.83",
        build_file = Label("@//3rdparty/crates:BUILD.wasm-bindgen-macro-0.2.83.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__wasm-bindgen-macro-support-0.2.83",
        sha256 = "07bc0c051dc5f23e307b13285f9d75df86bfdf816c5721e573dec1f9b8aa193c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/wasm-bindgen-macro-support/0.2.83/download"],
        strip_prefix = "wasm-bindgen-macro-support-0.2.83",
        build_file = Label("@//3rdparty/crates:BUILD.wasm-bindgen-macro-support-0.2.83.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__wasm-bindgen-shared-0.2.83",
        sha256 = "1c38c045535d93ec4f0b4defec448e4291638ee608530863b1e2ba115d4fff7f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/wasm-bindgen-shared/0.2.83/download"],
        strip_prefix = "wasm-bindgen-shared-0.2.83",
        build_file = Label("@//3rdparty/crates:BUILD.wasm-bindgen-shared-0.2.83.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__web-sys-0.3.60",
        sha256 = "bcda906d8be16e728fd5adc5b729afad4e444e106ab28cd1c7256e54fa61510f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/web-sys/0.3.60/download"],
        strip_prefix = "web-sys-0.3.60",
        build_file = Label("@//3rdparty/crates:BUILD.web-sys-0.3.60.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__wgpu-0.14.0",
        sha256 = "c2272b17bffc8a0c7d53897435da7c1db587c87d3a14e8dae9cdb8d1d210fc0f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/wgpu/0.14.0/download"],
        strip_prefix = "wgpu-0.14.0",
        build_file = Label("@//3rdparty/crates:BUILD.wgpu-0.14.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__wgpu-core-0.14.0",
        sha256 = "73d14cad393054caf992ee02b7da6a372245d39a484f7461c1f44f6f6359bd28",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/wgpu-core/0.14.0/download"],
        strip_prefix = "wgpu-core-0.14.0",
        build_file = Label("@//3rdparty/crates:BUILD.wgpu-core-0.14.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__wgpu-hal-0.14.0",
        sha256 = "cdae6a80dbc725343f02f854b310b37190be946aeea65e9d83afaa7d840ebaac",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/wgpu-hal/0.14.0/download"],
        strip_prefix = "wgpu-hal-0.14.0",
        build_file = Label("@//3rdparty/crates:BUILD.wgpu-hal-0.14.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__wgpu-types-0.14.0",
        sha256 = "28fb86c1909233c804aa79b7dd1ad06ebd979b2a465e3e980582db0ea9e69f3f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/wgpu-types/0.14.0/download"],
        strip_prefix = "wgpu-types-0.14.0",
        build_file = Label("@//3rdparty/crates:BUILD.wgpu-types-0.14.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__winapi-0.3.9",
        sha256 = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/winapi/0.3.9/download"],
        strip_prefix = "winapi-0.3.9",
        build_file = Label("@//3rdparty/crates:BUILD.winapi-0.3.9.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__winapi-i686-pc-windows-gnu-0.4.0",
        sha256 = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/winapi-i686-pc-windows-gnu/0.4.0/download"],
        strip_prefix = "winapi-i686-pc-windows-gnu-0.4.0",
        build_file = Label("@//3rdparty/crates:BUILD.winapi-i686-pc-windows-gnu-0.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__winapi-util-0.1.5",
        sha256 = "70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/winapi-util/0.1.5/download"],
        strip_prefix = "winapi-util-0.1.5",
        build_file = Label("@//3rdparty/crates:BUILD.winapi-util-0.1.5.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__winapi-x86_64-pc-windows-gnu-0.4.0",
        sha256 = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/winapi-x86_64-pc-windows-gnu/0.4.0/download"],
        strip_prefix = "winapi-x86_64-pc-windows-gnu-0.4.0",
        build_file = Label("@//3rdparty/crates:BUILD.winapi-x86_64-pc-windows-gnu-0.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__windows-sys-0.42.0",
        sha256 = "5a3e1820f08b8513f676f7ab6c1f99ff312fb97b553d30ff4dd86f9f15728aa7",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows-sys/0.42.0/download"],
        strip_prefix = "windows-sys-0.42.0",
        build_file = Label("@//3rdparty/crates:BUILD.windows-sys-0.42.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__windows_aarch64_gnullvm-0.42.0",
        sha256 = "41d2aa71f6f0cbe00ae5167d90ef3cfe66527d6f613ca78ac8024c3ccab9a19e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_aarch64_gnullvm/0.42.0/download"],
        strip_prefix = "windows_aarch64_gnullvm-0.42.0",
        build_file = Label("@//3rdparty/crates:BUILD.windows_aarch64_gnullvm-0.42.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__windows_aarch64_msvc-0.42.0",
        sha256 = "dd0f252f5a35cac83d6311b2e795981f5ee6e67eb1f9a7f64eb4500fbc4dcdb4",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_aarch64_msvc/0.42.0/download"],
        strip_prefix = "windows_aarch64_msvc-0.42.0",
        build_file = Label("@//3rdparty/crates:BUILD.windows_aarch64_msvc-0.42.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__windows_i686_gnu-0.42.0",
        sha256 = "fbeae19f6716841636c28d695375df17562ca208b2b7d0dc47635a50ae6c5de7",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_i686_gnu/0.42.0/download"],
        strip_prefix = "windows_i686_gnu-0.42.0",
        build_file = Label("@//3rdparty/crates:BUILD.windows_i686_gnu-0.42.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__windows_i686_msvc-0.42.0",
        sha256 = "84c12f65daa39dd2babe6e442988fc329d6243fdce47d7d2d155b8d874862246",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_i686_msvc/0.42.0/download"],
        strip_prefix = "windows_i686_msvc-0.42.0",
        build_file = Label("@//3rdparty/crates:BUILD.windows_i686_msvc-0.42.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__windows_x86_64_gnu-0.42.0",
        sha256 = "bf7b1b21b5362cbc318f686150e5bcea75ecedc74dd157d874d754a2ca44b0ed",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_x86_64_gnu/0.42.0/download"],
        strip_prefix = "windows_x86_64_gnu-0.42.0",
        build_file = Label("@//3rdparty/crates:BUILD.windows_x86_64_gnu-0.42.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__windows_x86_64_gnullvm-0.42.0",
        sha256 = "09d525d2ba30eeb3297665bd434a54297e4170c7f1a44cad4ef58095b4cd2028",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_x86_64_gnullvm/0.42.0/download"],
        strip_prefix = "windows_x86_64_gnullvm-0.42.0",
        build_file = Label("@//3rdparty/crates:BUILD.windows_x86_64_gnullvm-0.42.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__windows_x86_64_msvc-0.42.0",
        sha256 = "f40009d85759725a34da6d89a94e63d7bdc50a862acf0dbc7c8e488f1edcb6f5",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_x86_64_msvc/0.42.0/download"],
        strip_prefix = "windows_x86_64_msvc-0.42.0",
        build_file = Label("@//3rdparty/crates:BUILD.windows_x86_64_msvc-0.42.0.bazel"),
    )
