# crate build file###############################################################################
# @generated
# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To
# regenerate this file, run the following:
#
#     bazel run //3rdparty:crates_vendor
###############################################################################

load(
    "@bazel_skylib//lib:selects.bzl",
    "selects",
)
load(
    "@rules_rust//cargo:defs.bzl",
    "cargo_build_script",
)

# buildifier: disable=bzl-visibility
load("@rules_rust//crate_universe/private:selects.bzl", "select_with_or")
load(
    "@rules_rust//rust:defs.bzl",
    "rust_library",
)

package(default_visibility = ["//visibility:public"])

# licenses([
#     "TODO",  # MIT OR Apache-2.0
# ])

rust_library(
    name = "wgpu_core",
    srcs = glob(
        include = [
            "**/*.rs",
        ],
        exclude = [
        ],
    ),
    aliases = selects.with_or({
        # cfg(all(not(target_arch = "wasm32"), any(target_os = "ios", target_os = "macos")))
        (
            "@rules_rust//rust/platform:aarch64-apple-darwin",
            "@rules_rust//rust/platform:aarch64-apple-ios",
            "@rules_rust//rust/platform:aarch64-apple-ios-sim",
            "@rules_rust//rust/platform:i686-apple-darwin",
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:x86_64-apple-ios",
        ): {
            "@crates_vendor__wgpu-hal-0.14.0//:wgpu_hal": "hal",
            "@crates_vendor__wgpu-hal-0.14.0//:wgpu_hal": "hal",
            "@crates_vendor__wgpu-types-0.14.0//:wgpu_types": "wgt",
        },
        # cfg(all(not(target_arch = "wasm32"), unix, not(target_os = "ios"), not(target_os = "macos")))
        (
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-unknown-linux-gnueabi",
            "@rules_rust//rust/platform:armv7-linux-androideabi",
            "@rules_rust//rust/platform:armv7-unknown-linux-gnueabi",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:i686-unknown-freebsd",
            "@rules_rust//rust/platform:i686-unknown-linux-gnu",
            "@rules_rust//rust/platform:powerpc-unknown-linux-gnu",
            "@rules_rust//rust/platform:s390x-unknown-linux-gnu",
            "@rules_rust//rust/platform:x86_64-linux-android",
            "@rules_rust//rust/platform:x86_64-unknown-freebsd",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
        ): {
            "@crates_vendor__wgpu-hal-0.14.0//:wgpu_hal": "hal",
            "@crates_vendor__wgpu-hal-0.14.0//:wgpu_hal": "hal",
            "@crates_vendor__wgpu-types-0.14.0//:wgpu_types": "wgt",
        },
        # cfg(all(not(target_arch = "wasm32"), windows))
        (
            "@rules_rust//rust/platform:i686-pc-windows-msvc",
            "@rules_rust//rust/platform:x86_64-pc-windows-msvc",
        ): {
            "@crates_vendor__wgpu-hal-0.14.0//:wgpu_hal": "hal",
            "@crates_vendor__wgpu-hal-0.14.0//:wgpu_hal": "hal",
            "@crates_vendor__wgpu-types-0.14.0//:wgpu_types": "wgt",
        },
        # cfg(target_arch = "wasm32")
        (
            "@rules_rust//rust/platform:wasm32-unknown-unknown",
            "@rules_rust//rust/platform:wasm32-wasi",
        ): {
            "@crates_vendor__wgpu-hal-0.14.0//:wgpu_hal": "hal",
            "@crates_vendor__wgpu-hal-0.14.0//:wgpu_hal": "hal",
            "@crates_vendor__wgpu-types-0.14.0//:wgpu_types": "wgt",
        },
        # {
        # No supported platform triples for cfg: 'cfg(target_os = "emscripten")'
        # Skipped dependencies: [{"alias":"hal","id":"wgpu-hal 0.14.0","target":"wgpu_hal"}]
        # }
        "//conditions:default": {
            "@crates_vendor__wgpu-hal-0.14.0//:wgpu_hal": "hal",
            "@crates_vendor__wgpu-types-0.14.0//:wgpu_types": "wgt",
        },
    }),
    compile_data = glob(
        include = ["**"],
        exclude = [
            "BUILD",
            "BUILD.bazel",
            "WORKSPACE",
            "WORKSPACE.bazel",
        ],
    ) + select_with_or({
        "//conditions:default": [
        ],
    }),
    crate_features = [
        "default",
        "raw-window-handle",
    ],
    crate_root = "src/lib.rs",
    data = select_with_or({
        "//conditions:default": [
        ],
    }),
    edition = "2021",
    proc_macro_deps = [
    ] + select_with_or({
        # deps iterated here
        "//conditions:default": [
        ],
    }),
    rustc_env = {
    },
    rustc_env_files = select_with_or({
        "//conditions:default": [
        ],
    }),
    rustc_flags = [
        # In most cases, warnings in 3rd party crates are not interesting as
        # they're out of the control of consumers. The flag here silences
        # warnings. For more details see:
        # https://doc.rust-lang.org/rustc/lints/levels.html
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-bazel",
        "manual",
        "noclippy",
        "norustfmt",
    ],
    version = "0.14.0",
    deps = [
    ] + select_with_or({
        # deps iterated here
        # cfg(all(not(target_arch = "wasm32"), any(target_os = "ios", target_os = "macos")))
        (
            "@rules_rust//rust/platform:aarch64-apple-darwin",
            "@rules_rust//rust/platform:aarch64-apple-ios",
            "@rules_rust//rust/platform:aarch64-apple-ios-sim",
            "@rules_rust//rust/platform:i686-apple-darwin",
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:x86_64-apple-ios",
        ): [
            # Target Deps
            "@crates_vendor__wgpu-hal-0.14.0//:wgpu_hal",

            # Common Deps
            "@crates_vendor__arrayvec-0.7.2//:arrayvec",
            "@crates_vendor__bit-vec-0.6.3//:bit_vec",
            "@crates_vendor__bitflags-1.3.2//:bitflags",
            "@crates_vendor__codespan-reporting-0.11.1//:codespan_reporting",
            "@crates_vendor__fxhash-0.2.1//:fxhash",
            "@crates_vendor__log-0.4.17//:log",
            "@crates_vendor__naga-0.10.0//:naga",
            "@crates_vendor__parking_lot-0.12.1//:parking_lot",
            "@crates_vendor__profiling-1.0.7//:profiling",
            "@crates_vendor__raw-window-handle-0.5.0//:raw_window_handle",
            "@crates_vendor__smallvec-1.10.0//:smallvec",
            "@crates_vendor__thiserror-1.0.37//:thiserror",
            "@crates_vendor__wgpu-core-0.14.0//:build_script_build",
            "@crates_vendor__wgpu-hal-0.14.0//:wgpu_hal",
            "@crates_vendor__wgpu-types-0.14.0//:wgpu_types",
        ],
        # cfg(all(not(target_arch = "wasm32"), unix, not(target_os = "ios"), not(target_os = "macos")))
        (
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-unknown-linux-gnueabi",
            "@rules_rust//rust/platform:armv7-linux-androideabi",
            "@rules_rust//rust/platform:armv7-unknown-linux-gnueabi",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:i686-unknown-freebsd",
            "@rules_rust//rust/platform:i686-unknown-linux-gnu",
            "@rules_rust//rust/platform:powerpc-unknown-linux-gnu",
            "@rules_rust//rust/platform:s390x-unknown-linux-gnu",
            "@rules_rust//rust/platform:x86_64-linux-android",
            "@rules_rust//rust/platform:x86_64-unknown-freebsd",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
        ): [
            # Target Deps
            "@crates_vendor__wgpu-hal-0.14.0//:wgpu_hal",

            # Common Deps
            "@crates_vendor__arrayvec-0.7.2//:arrayvec",
            "@crates_vendor__bit-vec-0.6.3//:bit_vec",
            "@crates_vendor__bitflags-1.3.2//:bitflags",
            "@crates_vendor__codespan-reporting-0.11.1//:codespan_reporting",
            "@crates_vendor__fxhash-0.2.1//:fxhash",
            "@crates_vendor__log-0.4.17//:log",
            "@crates_vendor__naga-0.10.0//:naga",
            "@crates_vendor__parking_lot-0.12.1//:parking_lot",
            "@crates_vendor__profiling-1.0.7//:profiling",
            "@crates_vendor__raw-window-handle-0.5.0//:raw_window_handle",
            "@crates_vendor__smallvec-1.10.0//:smallvec",
            "@crates_vendor__thiserror-1.0.37//:thiserror",
            "@crates_vendor__wgpu-core-0.14.0//:build_script_build",
            "@crates_vendor__wgpu-hal-0.14.0//:wgpu_hal",
            "@crates_vendor__wgpu-types-0.14.0//:wgpu_types",
        ],
        # cfg(all(not(target_arch = "wasm32"), windows))
        (
            "@rules_rust//rust/platform:i686-pc-windows-msvc",
            "@rules_rust//rust/platform:x86_64-pc-windows-msvc",
        ): [
            # Target Deps
            "@crates_vendor__wgpu-hal-0.14.0//:wgpu_hal",

            # Common Deps
            "@crates_vendor__arrayvec-0.7.2//:arrayvec",
            "@crates_vendor__bit-vec-0.6.3//:bit_vec",
            "@crates_vendor__bitflags-1.3.2//:bitflags",
            "@crates_vendor__codespan-reporting-0.11.1//:codespan_reporting",
            "@crates_vendor__fxhash-0.2.1//:fxhash",
            "@crates_vendor__log-0.4.17//:log",
            "@crates_vendor__naga-0.10.0//:naga",
            "@crates_vendor__parking_lot-0.12.1//:parking_lot",
            "@crates_vendor__profiling-1.0.7//:profiling",
            "@crates_vendor__raw-window-handle-0.5.0//:raw_window_handle",
            "@crates_vendor__smallvec-1.10.0//:smallvec",
            "@crates_vendor__thiserror-1.0.37//:thiserror",
            "@crates_vendor__wgpu-core-0.14.0//:build_script_build",
            "@crates_vendor__wgpu-hal-0.14.0//:wgpu_hal",
            "@crates_vendor__wgpu-types-0.14.0//:wgpu_types",
        ],
        # cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))
        (
            "@rules_rust//rust/platform:wasm32-unknown-unknown",
            "@rules_rust//rust/platform:wasm32-wasi",
        ): [
            # Target Deps
            "@crates_vendor__web-sys-0.3.60//:web_sys",

            # Common Deps
            "@crates_vendor__arrayvec-0.7.2//:arrayvec",
            "@crates_vendor__bit-vec-0.6.3//:bit_vec",
            "@crates_vendor__bitflags-1.3.2//:bitflags",
            "@crates_vendor__codespan-reporting-0.11.1//:codespan_reporting",
            "@crates_vendor__fxhash-0.2.1//:fxhash",
            "@crates_vendor__log-0.4.17//:log",
            "@crates_vendor__naga-0.10.0//:naga",
            "@crates_vendor__parking_lot-0.12.1//:parking_lot",
            "@crates_vendor__profiling-1.0.7//:profiling",
            "@crates_vendor__raw-window-handle-0.5.0//:raw_window_handle",
            "@crates_vendor__smallvec-1.10.0//:smallvec",
            "@crates_vendor__thiserror-1.0.37//:thiserror",
            "@crates_vendor__wgpu-core-0.14.0//:build_script_build",
            "@crates_vendor__wgpu-hal-0.14.0//:wgpu_hal",
            "@crates_vendor__wgpu-types-0.14.0//:wgpu_types",
        ],
        # cfg(target_arch = "wasm32")
        (
            "@rules_rust//rust/platform:wasm32-unknown-unknown",
            "@rules_rust//rust/platform:wasm32-wasi",
        ): [
            # Target Deps
            "@crates_vendor__wgpu-hal-0.14.0//:wgpu_hal",

            # Common Deps
            "@crates_vendor__arrayvec-0.7.2//:arrayvec",
            "@crates_vendor__bit-vec-0.6.3//:bit_vec",
            "@crates_vendor__bitflags-1.3.2//:bitflags",
            "@crates_vendor__codespan-reporting-0.11.1//:codespan_reporting",
            "@crates_vendor__fxhash-0.2.1//:fxhash",
            "@crates_vendor__log-0.4.17//:log",
            "@crates_vendor__naga-0.10.0//:naga",
            "@crates_vendor__parking_lot-0.12.1//:parking_lot",
            "@crates_vendor__profiling-1.0.7//:profiling",
            "@crates_vendor__raw-window-handle-0.5.0//:raw_window_handle",
            "@crates_vendor__smallvec-1.10.0//:smallvec",
            "@crates_vendor__thiserror-1.0.37//:thiserror",
            "@crates_vendor__wgpu-core-0.14.0//:build_script_build",
            "@crates_vendor__wgpu-hal-0.14.0//:wgpu_hal",
            "@crates_vendor__wgpu-types-0.14.0//:wgpu_types",
        ],
        # cfg(target_os = "emscripten")
        #
        # No supported platform triples for cfg: 'cfg(target_os = "emscripten")'
        # Skipped dependencies: [{"alias":"hal","id":"wgpu-hal 0.14.0","target":"wgpu_hal"}]
        #
        "//conditions:default": [
            "@crates_vendor__arrayvec-0.7.2//:arrayvec",
            "@crates_vendor__bit-vec-0.6.3//:bit_vec",
            "@crates_vendor__bitflags-1.3.2//:bitflags",
            "@crates_vendor__codespan-reporting-0.11.1//:codespan_reporting",
            "@crates_vendor__fxhash-0.2.1//:fxhash",
            "@crates_vendor__log-0.4.17//:log",
            "@crates_vendor__naga-0.10.0//:naga",
            "@crates_vendor__parking_lot-0.12.1//:parking_lot",
            "@crates_vendor__profiling-1.0.7//:profiling",
            "@crates_vendor__raw-window-handle-0.5.0//:raw_window_handle",
            "@crates_vendor__smallvec-1.10.0//:smallvec",
            "@crates_vendor__thiserror-1.0.37//:thiserror",
            "@crates_vendor__wgpu-core-0.14.0//:build_script_build",
            "@crates_vendor__wgpu-hal-0.14.0//:wgpu_hal",
            "@crates_vendor__wgpu-types-0.14.0//:wgpu_types",
        ],
    }),
)

cargo_build_script(
    # See comment associated with alias. Do not change this name
    name = "wgpu-core_build_script",
    srcs = glob(
        include = [
            "**/*.rs",
        ],
        exclude = [
        ],
    ),
    aliases = selects.with_or({
        "//conditions:default": {
        },
    }),
    build_script_env = {
    },
    compile_data = select_with_or({
        "//conditions:default": [
        ],
    }),
    crate_features = [
        "default",
        "raw-window-handle",
    ],
    crate_name = "build_script_build",
    crate_root = "build.rs",
    data = glob(["**"]) + select_with_or({
        "//conditions:default": [
        ],
    }),
    edition = "2021",
    proc_macro_deps = [
    ] + select_with_or({
        # deps iterated here
        "//conditions:default": [
        ],
    }),
    rustc_env = {
    },
    rustc_env_files = select_with_or({
        "//conditions:default": [
        ],
    }),
    rustc_flags = [
        # In most cases, warnings in 3rd party crates are not interesting as
        # they're out of the control of consumers. The flag here silences
        # warnings. For more details see:
        # https://doc.rust-lang.org/rustc/lints/levels.html
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-bazel",
        "manual",
        "noclippy",
        "norustfmt",
    ],
    tools = select_with_or({
        "//conditions:default": [
        ],
    }),
    version = "0.14.0",
    visibility = ["//visibility:private"],
    deps = [
    ] + select_with_or({
        # deps iterated here
        "//conditions:default": [
            "@crates_vendor__cfg_aliases-0.1.1//:cfg_aliases",
        ],
    }),
)

alias(
    # Because `cargo_build_script` does some invisible target name mutating to
    # determine the package and crate name for a build script, the Bazel
    # target namename of any build script cannot be the Cargo canonical name
    # of `build_script_build` without losing out on having certain Cargo
    # environment variables set.
    name = "build_script_build",
    actual = "wgpu-core_build_script",
    tags = [
        "manual",
    ],
)
