# crate build file###############################################################################
# @generated
# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To
# regenerate this file, run the following:
#
#     bazel run //3rdparty:crates_vendor
###############################################################################

load(
    "@bazel_skylib//lib:selects.bzl",
    "selects",
)

# buildifier: disable=bzl-visibility
load("@rules_rust//crate_universe/private:selects.bzl", "select_with_or")
load(
    "@rules_rust//rust:defs.bzl",
    "rust_library",
)

package(default_visibility = ["//visibility:public"])

# licenses([
#     "TODO",  # MIT OR Apache-2.0
# ])

rust_library(
    name = "wgpu_hal",
    srcs = glob(
        include = [
            "**/*.rs",
        ],
        exclude = [
        ],
    ),
    aliases = selects.with_or({
        # cfg(any(target_os = "macos", target_os = "ios"))
        (
            "@rules_rust//rust/platform:aarch64-apple-darwin",
            "@rules_rust//rust/platform:aarch64-apple-ios",
            "@rules_rust//rust/platform:aarch64-apple-ios-sim",
            "@rules_rust//rust/platform:i686-apple-darwin",
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:x86_64-apple-ios",
        ): {
            "@crates_vendor__metal-0.24.0//:metal": "mtl",
            "@crates_vendor__wgpu-types-0.14.0//:wgpu_types": "wgt",
        },
        # cfg(not(target_arch = "wasm32"))
        (
            "@rules_rust//rust/platform:aarch64-apple-darwin",
            "@rules_rust//rust/platform:aarch64-apple-ios",
            "@rules_rust//rust/platform:aarch64-apple-ios-sim",
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-unknown-linux-gnueabi",
            "@rules_rust//rust/platform:armv7-linux-androideabi",
            "@rules_rust//rust/platform:armv7-unknown-linux-gnueabi",
            "@rules_rust//rust/platform:i686-apple-darwin",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:i686-pc-windows-msvc",
            "@rules_rust//rust/platform:i686-unknown-freebsd",
            "@rules_rust//rust/platform:i686-unknown-linux-gnu",
            "@rules_rust//rust/platform:powerpc-unknown-linux-gnu",
            "@rules_rust//rust/platform:riscv32imc-unknown-none-elf",
            "@rules_rust//rust/platform:s390x-unknown-linux-gnu",
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:x86_64-apple-ios",
            "@rules_rust//rust/platform:x86_64-linux-android",
            "@rules_rust//rust/platform:x86_64-pc-windows-msvc",
            "@rules_rust//rust/platform:x86_64-unknown-freebsd",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
        ): {
            "@crates_vendor__khronos-egl-4.1.0//:khronos_egl": "egl",
            "@crates_vendor__wgpu-types-0.14.0//:wgpu_types": "wgt",
        },
        # {
        # No supported platform triples for cfg: 'cfg(target_os = "emscripten")'
        # Skipped dependencies: [{"alias":"egl","id":"khronos-egl 4.1.0","target":"khronos_egl"}]
        # }
        # cfg(windows)
        (
            "@rules_rust//rust/platform:i686-pc-windows-msvc",
            "@rules_rust//rust/platform:x86_64-pc-windows-msvc",
        ): {
            "@crates_vendor__d3d12-0.5.0//:d3d12": "native",
            "@crates_vendor__wgpu-types-0.14.0//:wgpu_types": "wgt",
        },
        "//conditions:default": {
            "@crates_vendor__wgpu-types-0.14.0//:wgpu_types": "wgt",
        },
    }),
    compile_data = glob(
        include = ["**"],
        exclude = [
            "BUILD",
            "BUILD.bazel",
            "WORKSPACE",
            "WORKSPACE.bazel",
        ],
    ) + select_with_or({
        "//conditions:default": [
        ],
    }),
    crate_features = [
        "ash",
        "bit-set",
        "block",
        "default",
        "dx11",
        "dx12",
        "egl",
        "emscripten",
        "foreign-types",
        "gles",
        "glow",
        "gpu-alloc",
        "gpu-descriptor",
        "libloading",
        "metal",
        "native",
        "range-alloc",
        "renderdoc",
        "renderdoc-sys",
        "smallvec",
        "vulkan",
    ],
    crate_root = "src/lib.rs",
    data = select_with_or({
        "//conditions:default": [
        ],
    }),
    edition = "2021",
    proc_macro_deps = [
    ] + select_with_or({
        # deps iterated here
        "//conditions:default": [
        ],
    }),
    rustc_env = {
    },
    rustc_env_files = select_with_or({
        "//conditions:default": [
        ],
    }),
    rustc_flags = [
        # In most cases, warnings in 3rd party crates are not interesting as
        # they're out of the control of consumers. The flag here silences
        # warnings. For more details see:
        # https://doc.rust-lang.org/rustc/lints/levels.html
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-bazel",
        "manual",
        "noclippy",
        "norustfmt",
    ],
    version = "0.14.0",
    deps = [
    ] + select_with_or({
        # deps iterated here
        # cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))
        (
            "@rules_rust//rust/platform:wasm32-unknown-unknown",
            "@rules_rust//rust/platform:wasm32-wasi",
        ): [
            # Target Deps
            "@crates_vendor__js-sys-0.3.60//:js_sys",
            "@crates_vendor__wasm-bindgen-0.2.83//:wasm_bindgen",
            "@crates_vendor__web-sys-0.3.60//:web_sys",

            # Common Deps
            "@crates_vendor__arrayvec-0.7.2//:arrayvec",
            "@crates_vendor__ash-0.37.0-1.3.209//:ash",
            "@crates_vendor__bit-set-0.5.3//:bit_set",
            "@crates_vendor__bitflags-1.3.2//:bitflags",
            "@crates_vendor__block-0.1.6//:block",
            "@crates_vendor__foreign-types-0.3.2//:foreign_types",
            "@crates_vendor__fxhash-0.2.1//:fxhash",
            "@crates_vendor__glow-0.11.2//:glow",
            "@crates_vendor__gpu-alloc-0.5.3//:gpu_alloc",
            "@crates_vendor__gpu-descriptor-0.2.3//:gpu_descriptor",
            "@crates_vendor__log-0.4.17//:log",
            "@crates_vendor__naga-0.10.0//:naga",
            "@crates_vendor__parking_lot-0.12.1//:parking_lot",
            "@crates_vendor__profiling-1.0.7//:profiling",
            "@crates_vendor__range-alloc-0.1.2//:range_alloc",
            "@crates_vendor__raw-window-handle-0.5.0//:raw_window_handle",
            "@crates_vendor__renderdoc-sys-0.7.1//:renderdoc_sys",
            "@crates_vendor__smallvec-1.10.0//:smallvec",
            "@crates_vendor__thiserror-1.0.37//:thiserror",
            "@crates_vendor__wgpu-types-0.14.0//:wgpu_types",
        ],
        # cfg(any(target_os = "macos", target_os = "ios"))
        (
            "@rules_rust//rust/platform:aarch64-apple-darwin",
            "@rules_rust//rust/platform:aarch64-apple-ios",
            "@rules_rust//rust/platform:aarch64-apple-ios-sim",
            "@rules_rust//rust/platform:i686-apple-darwin",
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:x86_64-apple-ios",
        ): [
            # Target Deps
            "@crates_vendor__core-graphics-types-0.1.1//:core_graphics_types",
            "@crates_vendor__metal-0.24.0//:metal",
            "@crates_vendor__objc-0.2.7//:objc",

            # Common Deps
            "@crates_vendor__arrayvec-0.7.2//:arrayvec",
            "@crates_vendor__ash-0.37.0-1.3.209//:ash",
            "@crates_vendor__bit-set-0.5.3//:bit_set",
            "@crates_vendor__bitflags-1.3.2//:bitflags",
            "@crates_vendor__block-0.1.6//:block",
            "@crates_vendor__foreign-types-0.3.2//:foreign_types",
            "@crates_vendor__fxhash-0.2.1//:fxhash",
            "@crates_vendor__glow-0.11.2//:glow",
            "@crates_vendor__gpu-alloc-0.5.3//:gpu_alloc",
            "@crates_vendor__gpu-descriptor-0.2.3//:gpu_descriptor",
            "@crates_vendor__log-0.4.17//:log",
            "@crates_vendor__naga-0.10.0//:naga",
            "@crates_vendor__parking_lot-0.12.1//:parking_lot",
            "@crates_vendor__profiling-1.0.7//:profiling",
            "@crates_vendor__range-alloc-0.1.2//:range_alloc",
            "@crates_vendor__raw-window-handle-0.5.0//:raw_window_handle",
            "@crates_vendor__renderdoc-sys-0.7.1//:renderdoc_sys",
            "@crates_vendor__smallvec-1.10.0//:smallvec",
            "@crates_vendor__thiserror-1.0.37//:thiserror",
            "@crates_vendor__wgpu-types-0.14.0//:wgpu_types",
        ],
        # cfg(not(target_arch = "wasm32"))
        (
            "@rules_rust//rust/platform:aarch64-apple-darwin",
            "@rules_rust//rust/platform:aarch64-apple-ios",
            "@rules_rust//rust/platform:aarch64-apple-ios-sim",
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-unknown-linux-gnueabi",
            "@rules_rust//rust/platform:armv7-linux-androideabi",
            "@rules_rust//rust/platform:armv7-unknown-linux-gnueabi",
            "@rules_rust//rust/platform:i686-apple-darwin",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:i686-pc-windows-msvc",
            "@rules_rust//rust/platform:i686-unknown-freebsd",
            "@rules_rust//rust/platform:i686-unknown-linux-gnu",
            "@rules_rust//rust/platform:powerpc-unknown-linux-gnu",
            "@rules_rust//rust/platform:riscv32imc-unknown-none-elf",
            "@rules_rust//rust/platform:s390x-unknown-linux-gnu",
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:x86_64-apple-ios",
            "@rules_rust//rust/platform:x86_64-linux-android",
            "@rules_rust//rust/platform:x86_64-pc-windows-msvc",
            "@rules_rust//rust/platform:x86_64-unknown-freebsd",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
        ): [
            # Target Deps
            "@crates_vendor__khronos-egl-4.1.0//:khronos_egl",
            "@crates_vendor__libloading-0.7.3//:libloading",

            # Common Deps
            "@crates_vendor__arrayvec-0.7.2//:arrayvec",
            "@crates_vendor__ash-0.37.0-1.3.209//:ash",
            "@crates_vendor__bit-set-0.5.3//:bit_set",
            "@crates_vendor__bitflags-1.3.2//:bitflags",
            "@crates_vendor__block-0.1.6//:block",
            "@crates_vendor__foreign-types-0.3.2//:foreign_types",
            "@crates_vendor__fxhash-0.2.1//:fxhash",
            "@crates_vendor__glow-0.11.2//:glow",
            "@crates_vendor__gpu-alloc-0.5.3//:gpu_alloc",
            "@crates_vendor__gpu-descriptor-0.2.3//:gpu_descriptor",
            "@crates_vendor__log-0.4.17//:log",
            "@crates_vendor__naga-0.10.0//:naga",
            "@crates_vendor__parking_lot-0.12.1//:parking_lot",
            "@crates_vendor__profiling-1.0.7//:profiling",
            "@crates_vendor__range-alloc-0.1.2//:range_alloc",
            "@crates_vendor__raw-window-handle-0.5.0//:raw_window_handle",
            "@crates_vendor__renderdoc-sys-0.7.1//:renderdoc_sys",
            "@crates_vendor__smallvec-1.10.0//:smallvec",
            "@crates_vendor__thiserror-1.0.37//:thiserror",
            "@crates_vendor__wgpu-types-0.14.0//:wgpu_types",
        ],
        # cfg(target_os = "android")
        (
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:armv7-linux-androideabi",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:x86_64-linux-android",
        ): [
            # Target Deps
            "@crates_vendor__android_system_properties-0.1.5//:android_system_properties",

            # Common Deps
            "@crates_vendor__arrayvec-0.7.2//:arrayvec",
            "@crates_vendor__ash-0.37.0-1.3.209//:ash",
            "@crates_vendor__bit-set-0.5.3//:bit_set",
            "@crates_vendor__bitflags-1.3.2//:bitflags",
            "@crates_vendor__block-0.1.6//:block",
            "@crates_vendor__foreign-types-0.3.2//:foreign_types",
            "@crates_vendor__fxhash-0.2.1//:fxhash",
            "@crates_vendor__glow-0.11.2//:glow",
            "@crates_vendor__gpu-alloc-0.5.3//:gpu_alloc",
            "@crates_vendor__gpu-descriptor-0.2.3//:gpu_descriptor",
            "@crates_vendor__log-0.4.17//:log",
            "@crates_vendor__naga-0.10.0//:naga",
            "@crates_vendor__parking_lot-0.12.1//:parking_lot",
            "@crates_vendor__profiling-1.0.7//:profiling",
            "@crates_vendor__range-alloc-0.1.2//:range_alloc",
            "@crates_vendor__raw-window-handle-0.5.0//:raw_window_handle",
            "@crates_vendor__renderdoc-sys-0.7.1//:renderdoc_sys",
            "@crates_vendor__smallvec-1.10.0//:smallvec",
            "@crates_vendor__thiserror-1.0.37//:thiserror",
            "@crates_vendor__wgpu-types-0.14.0//:wgpu_types",
        ],
        # cfg(target_os = "emscripten")
        #
        # No supported platform triples for cfg: 'cfg(target_os = "emscripten")'
        # Skipped dependencies: [{"alias":"egl","id":"khronos-egl 4.1.0","target":"khronos_egl"},{"id":"libloading 0.7.3","target":"libloading"}]
        #
        # cfg(windows)
        (
            "@rules_rust//rust/platform:i686-pc-windows-msvc",
            "@rules_rust//rust/platform:x86_64-pc-windows-msvc",
        ): [
            # Target Deps
            "@crates_vendor__d3d12-0.5.0//:d3d12",
            "@crates_vendor__winapi-0.3.9//:winapi",

            # Common Deps
            "@crates_vendor__arrayvec-0.7.2//:arrayvec",
            "@crates_vendor__ash-0.37.0-1.3.209//:ash",
            "@crates_vendor__bit-set-0.5.3//:bit_set",
            "@crates_vendor__bitflags-1.3.2//:bitflags",
            "@crates_vendor__block-0.1.6//:block",
            "@crates_vendor__foreign-types-0.3.2//:foreign_types",
            "@crates_vendor__fxhash-0.2.1//:fxhash",
            "@crates_vendor__glow-0.11.2//:glow",
            "@crates_vendor__gpu-alloc-0.5.3//:gpu_alloc",
            "@crates_vendor__gpu-descriptor-0.2.3//:gpu_descriptor",
            "@crates_vendor__log-0.4.17//:log",
            "@crates_vendor__naga-0.10.0//:naga",
            "@crates_vendor__parking_lot-0.12.1//:parking_lot",
            "@crates_vendor__profiling-1.0.7//:profiling",
            "@crates_vendor__range-alloc-0.1.2//:range_alloc",
            "@crates_vendor__raw-window-handle-0.5.0//:raw_window_handle",
            "@crates_vendor__renderdoc-sys-0.7.1//:renderdoc_sys",
            "@crates_vendor__smallvec-1.10.0//:smallvec",
            "@crates_vendor__thiserror-1.0.37//:thiserror",
            "@crates_vendor__wgpu-types-0.14.0//:wgpu_types",
        ],
        "//conditions:default": [
            "@crates_vendor__arrayvec-0.7.2//:arrayvec",
            "@crates_vendor__ash-0.37.0-1.3.209//:ash",
            "@crates_vendor__bit-set-0.5.3//:bit_set",
            "@crates_vendor__bitflags-1.3.2//:bitflags",
            "@crates_vendor__block-0.1.6//:block",
            "@crates_vendor__foreign-types-0.3.2//:foreign_types",
            "@crates_vendor__fxhash-0.2.1//:fxhash",
            "@crates_vendor__glow-0.11.2//:glow",
            "@crates_vendor__gpu-alloc-0.5.3//:gpu_alloc",
            "@crates_vendor__gpu-descriptor-0.2.3//:gpu_descriptor",
            "@crates_vendor__log-0.4.17//:log",
            "@crates_vendor__naga-0.10.0//:naga",
            "@crates_vendor__parking_lot-0.12.1//:parking_lot",
            "@crates_vendor__profiling-1.0.7//:profiling",
            "@crates_vendor__range-alloc-0.1.2//:range_alloc",
            "@crates_vendor__raw-window-handle-0.5.0//:raw_window_handle",
            "@crates_vendor__renderdoc-sys-0.7.1//:renderdoc_sys",
            "@crates_vendor__smallvec-1.10.0//:smallvec",
            "@crates_vendor__thiserror-1.0.37//:thiserror",
            "@crates_vendor__wgpu-types-0.14.0//:wgpu_types",
        ],
    }),
)
